"use strict";const getFieldsValues=(fields)=>{const values={};for(const id in fields){let $inputs=fields[id].inputs;if($inputs.length===1){if($inputs.attr('type')==='checkbox'){if($inputs.prop('checked')){values[id]=$inputs.val()}else{values[id]=''}}else{values[id]=$inputs.val()}}else{let checked=[];$inputs.each((_,e)=>{if(e.checked){checked.push(e.value)}})
if($inputs.attr('type')==="radio"){values[id]=checked[0]}else{values[id]=checked.length?checked:''}}}
return values};const getAllFields=($form,fieldIds)=>{const fields={};for(const id of fieldIds){const $group=$form.find('.elementor-field-group-'+id);if($group.length){fields[id]={wrapper:$group};let $field=$group.find(`[name=form_fields\\[${id}\\]]`);if($field.length){fields[id].inputs=$field}else{fields[id].inputs=$group.find(`[name=form_fields\\[${id}\\]\\[\\]]`)}}}
return fields}
const areAllInputsDisabled=($inputs)=>{for(const input of $inputs){const $input=jQuery(input);if(!$input.prop('disabled')){return!1}}
return!0}
const initializeStepsJumping=($form)=>{if(!$form.hasClass('dce-form-has-conditions')){return};let $steps=$form.find('.elementor-field-type-step');if($steps.length<3){return}
let steps=[];for(const step of $steps){const $step=jQuery(step);const $inputs=$step.find('input,select');const $next=$step.find('.elementor-field-type-next button');const $previous=$step.find('.elementor-field-type-previous button');steps.push({nextButton:$next,previousButton:$previous,inputs:$inputs})}
for(let i=0;i<(steps.length-2);i++){const nextStep=steps[i+1];steps[i].nextButton.on('click',()=>{if(areAllInputsDisabled(nextStep.inputs)){nextStep.nextButton.trigger('click')}})}
for(let i=2;i<steps.length;i++){const prevStep=steps[i-1];steps[i].previousButton.on('click',()=>{if(areAllInputsDisabled(prevStep.inputs)){prevStep.previousButton.trigger('click')}})}}
function initializeConditionalFields($form){const $outWrapper=$form.find('.elementor-form-fields-wrapper');let conditions=$outWrapper.attr('data-conditions-expressions');let fieldIds=$outWrapper.attr('data-field-ids');if(conditions===undefined){return}
$form.addClass('dce-form-has-conditions');const lang=new expressionLanguage.ExpressionLanguage();fieldIds=JSON.parse(fieldIds);conditions=JSON.parse(conditions);const fields=getAllFields($form,fieldIds);const onChange=()=>{const values=getFieldsValues(fields);for(const cond of conditions){let result;try{result=lang.evaluate(cond.condition,values)}catch(error){$form.prepend(`<div class="error">Conditional Fields v2 Error (the error is on the conditions of field ""<code>${cond.id}</code>"): ${error}</div>`)}
const $fieldInputs=fields[cond.id].inputs;const $fieldWrapper=fields[cond.id].wrapper;const isActive=cond.mode==='show'?result:!result;if(isActive){$fieldInputs.prop('disabled',!1);$fieldInputs.show();$fieldWrapper.show()}else{values[cond.id]='';$fieldInputs.prop('disabled',!0)
if(!cond.disableOnly){$fieldInputs.hide();$fieldWrapper.hide()}}}}
onChange();let $all=$form.find('input, select');$all.on('change',onChange)}
jQuery(window).on('elementor/frontend/init',function(){elementorFrontend.hooks.addAction('frontend/element_ready/form.default',initializeConditionalFields);elementorFrontend.hooks.addAction('frontend/element_ready/global',()=>{elementorFrontend.hooks.addAction('frontend/element_ready/form.default',initializeStepsJumping)})})